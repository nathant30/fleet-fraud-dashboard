{
  "timestamp": "2025-08-22T08:09:35.163Z",
  "summary": {
    "totalTests": 4,
    "passed": 0,
    "failed": 4,
    "successRate": 0
  },
  "results": {
    "frontend": {
      "passed": 0,
      "failed": 0,
      "errors": []
    },
    "api": {
      "passed": 0,
      "failed": 0,
      "errors": [
        "Command failed: npm test -- tests/api.test.js\nFAIL tests/api.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 |\n      4 | describe('API Endpoint Tests', () => {\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/api.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.366 s\nRan all test suites matching /tests\\/api.test.js/i.\n\nFAIL tests/api.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 |\n      4 | describe('API Endpoint Tests', () => {\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/api.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.366 s\nRan all test suites matching /tests\\/api.test.js/i.\n"
      ]
    },
    "database": {
      "passed": 0,
      "failed": 0,
      "errors": [
        "Command failed: npm test -- tests/database.test.js\nFAIL tests/database.test.js (90.369 s)\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have sample companies\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"email\"\n    Received path: []\n\n    Received value: {\"address\": \"123 Fleet Street\", \"city\": \"Chicago\", \"contact_email\": \"contact@metrologistics.com\", \"contact_phone\": \"(555) 123-4567\", \"country\": \"US\", \"created_at\": \"2025-08-22 03:45:11\", \"id\": 1, \"name\": \"Metro Logistics LLC\", \"registration_number\": \"ML001234567\", \"risk_score\": 2.5, \"state\": \"IL\", \"status\": \"active\", \"updated_at\": \"2025-08-22 03:45:11\", \"zip_code\": \"60601\"}\n\n      123 |           expect(company).toHaveProperty('id');\n      124 |           expect(company).toHaveProperty('name');\n    > 125 |           expect(company).toHaveProperty('email');\n          |                           ^\n      126 |         });\n      127 |\n      128 |         done();\n\n      at toHaveProperty (tests/database.test.js:125:27)\n          at Array.forEach (<anonymous>)\n      at Statement.forEach (tests/database.test.js:122:19)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have sample companies\n\n    thrown: \"Exceeded timeout of 30000 ms for a test while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      110 |     });\n      111 |\n    > 112 |     it('should have sample companies', (done) => {\n          |     ^\n      113 |       db.all(\"SELECT * FROM companies LIMIT 5\", (err, companies) => {\n      114 |         if (err) {\n      115 |           done(err);\n\n      at it (tests/database.test.js:112:5)\n      at describe (tests/database.test.js:99:3)\n      at Object.describe (tests/database.test.js:5:1)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have consistent driver-company relationships\n\n    SQLITE_ERROR: no such column: d.name\n    --> in Database#get('\\n' +\n      '        SELECT d.id, d.name as driver_name, c.name as company_name\\n' +\n      '        FROM drivers d\\n' +\n      '        LEFT JOIN companies c ON d.company_id = c.id\\n' +\n      '        WHERE c.id IS NULL\\n' +\n      '        LIMIT 1\\n' +\n      '      ', [Function (anonymous)])\n\n      139 |       `;\n      140 |\n    > 141 |       db.get(query, (err, orphanedDriver) => {\n          |          ^\n      142 |         if (err) {\n      143 |           done(err);\n      144 |           return;\n\n      at Object.get (tests/database.test.js:141:10)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have valid vehicle assignments\n\n    SQLITE_ERROR: no such column: v.vehicle_id\n    --> in Database#get('\\n' +\n      '        SELECT v.id, v.vehicle_id, c.name as company_name\\n' +\n      '        FROM vehicles v\\n' +\n      '        LEFT JOIN companies c ON v.company_id = c.id\\n' +\n      '        WHERE c.id IS NULL\\n' +\n      '        LIMIT 1\\n' +\n      '      ', [Function (anonymous)])\n\n      160 |       `;\n      161 |\n    > 162 |       db.get(query, (err, orphanedVehicle) => {\n          |          ^\n      163 |         if (err) {\n      164 |           done(err);\n      165 |           return;\n\n      at Object.get (tests/database.test.js:162:10)\n\n  ● Database Connection and Integrity Tests › Fraud Detection Data Validation › should have fraud alerts with proper structure\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"company_id\"\n    Received path: []\n\n    Received value: {\"alert_message\": \"Driver has multiple claims within 30 days\", \"alert_type\": \"claim_pattern\", \"assigned_to\": 3, \"created_at\": \"2025-08-22 03:45:11\", \"entity_id\": 3, \"entity_type\": \"driver\", \"fraud_indicators\": \"Multiple claims, high dollar amounts, pattern of incidents\", \"id\": 1, \"notes\": null, \"resolved_at\": null, \"risk_score\": 9.1, \"severity\": \"high\", \"status\": \"open\", \"updated_at\": \"2025-08-22 03:45:11\"}\n\n      183 |           alerts.forEach(alert => {\n      184 |             expect(alert).toHaveProperty('id');\n    > 185 |             expect(alert).toHaveProperty('company_id');\n          |                           ^\n      186 |             expect(alert).toHaveProperty('alert_type');\n      187 |             expect(alert).toHaveProperty('severity');\n      188 |             expect(alert).toHaveProperty('status');\n\n      at toHaveProperty (tests/database.test.js:185:27)\n          at Array.forEach (<anonymous>)\n      at Statement.forEach (tests/database.test.js:183:18)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n\n  ● Database Connection and Integrity Tests › Fraud Detection Data Validation › should have fraud alerts with proper structure\n\n    thrown: \"Exceeded timeout of 30000 ms for a test while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      173 |\n      174 |   describe('Fraud Detection Data Validation', () => {\n    > 175 |     it('should have fraud alerts with proper structure', (done) => {\n          |     ^\n      176 |       db.all(\"SELECT * FROM fraud_alerts LIMIT 5\", (err, alerts) => {\n      177 |         if (err) {\n      178 |           done(err);\n\n      at it (tests/database.test.js:175:5)\n      at describe (tests/database.test.js:174:3)\n      at Object.describe (tests/database.test.js:5:1)\n\n  ● Database Connection and Integrity Tests › Database Performance Tests › should handle large queries efficiently\n\n    SQLITE_ERROR: no such column: d.name\n    --> in Database#all('\\n' +\n      '        SELECT \\n' +\n      '          d.name,\\n' +\n      '          d.fraud_score,\\n' +\n      '          c.name as company_name,\\n' +\n      '          COUNT(v.id) as violation_count\\n' +\n      '        FROM drivers d\\n' +\n      '        LEFT JOIN companies c ON d.company_id = c.id\\n' +\n      '        LEFT JOIN violations v ON d.id = v.driver_id\\n' +\n      '        GROUP BY d.id, d.name, d.fraud_score, c.name\\n' +\n      '        ORDER BY d.fraud_score DESC\\n' +\n      '        LIMIT 100\\n' +\n      '      ', [Function (anonymous)])\n\n      251 |       `;\n      252 |\n    > 253 |       db.all(complexQuery, (err, results) => {\n          |          ^\n      254 |         if (err) {\n      255 |           done(err);\n      256 |           return;\n\n      at Object.all (tests/database.test.js:253:10)\n\n\n  ● Test suite failed to run\n\n    thrown: \"Exceeded timeout of 30000 ms for a hook while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      21 |   });\n      22 |\n    > 23 |   afterAll((done) => {\n         |   ^\n      24 |     if (db) {\n      25 |       db.close(done);\n      26 |     } else {\n\n      at afterAll (tests/database.test.js:23:3)\n      at Object.describe (tests/database.test.js:5:1)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        90.654 s, estimated 91 s\nRan all test suites matching /tests\\/database.test.js/i.\nFATAL ERROR: Error::ThrowAsJavaScriptException napi_throw\n----- Native stack trace -----\n\n 1: 0x104ceddb4 node::OnFatalError(char const*, char const*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n 2: 0x104cae1ec napi_open_callback_scope [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n 3: 0x109bfb650 Napi::Error::Error(napi_env__*, napi_value__*) [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 4: 0x109bf90e0 Napi::Error::ThrowAsJavaScriptException() const [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 5: 0x109bf7ad8 bool Napi::Object::Set<Napi::Number>(Napi::Value, Napi::Number const&) const [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 6: 0x109c0b2e4 node_sqlite3::Statement::CleanQueue() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 7: 0x109c16fe4 node_sqlite3::Statement::~Statement() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 8: 0x109c12fe0 node_sqlite3::Statement::~Statement() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 9: 0x109c153b4 Napi::ObjectWrap<node_sqlite3::Statement>::FinalizeCallback(napi_env__*, void*, void*) [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n10: 0x104cad12c void napi_env__::CallIntoModule<void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&, void node_napi_env__::CallbackIntoModule<true, void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)>(void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&&)::'lambda'(napi_env__*, v8::Local<v8::Value>)>(void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&, void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&&) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n11: 0x104cad0a8 void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n12: 0x104c91140 v8impl::Reference::Finalize() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n13: 0x104cacee4 napi_env__::DeleteMe() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n14: 0x104c31c24 node::CleanupQueue::Drain() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n15: 0x104c87014 node::Environment::RunCleanup() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n16: 0x104c068cc node::FreeEnvironment(node::Environment*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n17: 0x104d351a4 node::NodeMainInstance::Run() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n18: 0x104caca58 node::Start(int, char**) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n19: 0x18704ab98 start [/usr/lib/dyld]\n\nFAIL tests/database.test.js (90.369 s)\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have sample companies\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"email\"\n    Received path: []\n\n    Received value: {\"address\": \"123 Fleet Street\", \"city\": \"Chicago\", \"contact_email\": \"contact@metrologistics.com\", \"contact_phone\": \"(555) 123-4567\", \"country\": \"US\", \"created_at\": \"2025-08-22 03:45:11\", \"id\": 1, \"name\": \"Metro Logistics LLC\", \"registration_number\": \"ML001234567\", \"risk_score\": 2.5, \"state\": \"IL\", \"status\": \"active\", \"updated_at\": \"2025-08-22 03:45:11\", \"zip_code\": \"60601\"}\n\n      123 |           expect(company).toHaveProperty('id');\n      124 |           expect(company).toHaveProperty('name');\n    > 125 |           expect(company).toHaveProperty('email');\n          |                           ^\n      126 |         });\n      127 |\n      128 |         done();\n\n      at toHaveProperty (tests/database.test.js:125:27)\n          at Array.forEach (<anonymous>)\n      at Statement.forEach (tests/database.test.js:122:19)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have sample companies\n\n    thrown: \"Exceeded timeout of 30000 ms for a test while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      110 |     });\n      111 |\n    > 112 |     it('should have sample companies', (done) => {\n          |     ^\n      113 |       db.all(\"SELECT * FROM companies LIMIT 5\", (err, companies) => {\n      114 |         if (err) {\n      115 |           done(err);\n\n      at it (tests/database.test.js:112:5)\n      at describe (tests/database.test.js:99:3)\n      at Object.describe (tests/database.test.js:5:1)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have consistent driver-company relationships\n\n    SQLITE_ERROR: no such column: d.name\n    --> in Database#get('\\n' +\n      '        SELECT d.id, d.name as driver_name, c.name as company_name\\n' +\n      '        FROM drivers d\\n' +\n      '        LEFT JOIN companies c ON d.company_id = c.id\\n' +\n      '        WHERE c.id IS NULL\\n' +\n      '        LIMIT 1\\n' +\n      '      ', [Function (anonymous)])\n\n      139 |       `;\n      140 |\n    > 141 |       db.get(query, (err, orphanedDriver) => {\n          |          ^\n      142 |         if (err) {\n      143 |           done(err);\n      144 |           return;\n\n      at Object.get (tests/database.test.js:141:10)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have valid vehicle assignments\n\n    SQLITE_ERROR: no such column: v.vehicle_id\n    --> in Database#get('\\n' +\n      '        SELECT v.id, v.vehicle_id, c.name as company_name\\n' +\n      '        FROM vehicles v\\n' +\n      '        LEFT JOIN companies c ON v.company_id = c.id\\n' +\n      '        WHERE c.id IS NULL\\n' +\n      '        LIMIT 1\\n' +\n      '      ', [Function (anonymous)])\n\n      160 |       `;\n      161 |\n    > 162 |       db.get(query, (err, orphanedVehicle) => {\n          |          ^\n      163 |         if (err) {\n      164 |           done(err);\n      165 |           return;\n\n      at Object.get (tests/database.test.js:162:10)\n\n  ● Database Connection and Integrity Tests › Fraud Detection Data Validation › should have fraud alerts with proper structure\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"company_id\"\n    Received path: []\n\n    Received value: {\"alert_message\": \"Driver has multiple claims within 30 days\", \"alert_type\": \"claim_pattern\", \"assigned_to\": 3, \"created_at\": \"2025-08-22 03:45:11\", \"entity_id\": 3, \"entity_type\": \"driver\", \"fraud_indicators\": \"Multiple claims, high dollar amounts, pattern of incidents\", \"id\": 1, \"notes\": null, \"resolved_at\": null, \"risk_score\": 9.1, \"severity\": \"high\", \"status\": \"open\", \"updated_at\": \"2025-08-22 03:45:11\"}\n\n      183 |           alerts.forEach(alert => {\n      184 |             expect(alert).toHaveProperty('id');\n    > 185 |             expect(alert).toHaveProperty('company_id');\n          |                           ^\n      186 |             expect(alert).toHaveProperty('alert_type');\n      187 |             expect(alert).toHaveProperty('severity');\n      188 |             expect(alert).toHaveProperty('status');\n\n      at toHaveProperty (tests/database.test.js:185:27)\n          at Array.forEach (<anonymous>)\n      at Statement.forEach (tests/database.test.js:183:18)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n\n  ● Database Connection and Integrity Tests › Fraud Detection Data Validation › should have fraud alerts with proper structure\n\n    thrown: \"Exceeded timeout of 30000 ms for a test while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      173 |\n      174 |   describe('Fraud Detection Data Validation', () => {\n    > 175 |     it('should have fraud alerts with proper structure', (done) => {\n          |     ^\n      176 |       db.all(\"SELECT * FROM fraud_alerts LIMIT 5\", (err, alerts) => {\n      177 |         if (err) {\n      178 |           done(err);\n\n      at it (tests/database.test.js:175:5)\n      at describe (tests/database.test.js:174:3)\n      at Object.describe (tests/database.test.js:5:1)\n\n  ● Database Connection and Integrity Tests › Database Performance Tests › should handle large queries efficiently\n\n    SQLITE_ERROR: no such column: d.name\n    --> in Database#all('\\n' +\n      '        SELECT \\n' +\n      '          d.name,\\n' +\n      '          d.fraud_score,\\n' +\n      '          c.name as company_name,\\n' +\n      '          COUNT(v.id) as violation_count\\n' +\n      '        FROM drivers d\\n' +\n      '        LEFT JOIN companies c ON d.company_id = c.id\\n' +\n      '        LEFT JOIN violations v ON d.id = v.driver_id\\n' +\n      '        GROUP BY d.id, d.name, d.fraud_score, c.name\\n' +\n      '        ORDER BY d.fraud_score DESC\\n' +\n      '        LIMIT 100\\n' +\n      '      ', [Function (anonymous)])\n\n      251 |       `;\n      252 |\n    > 253 |       db.all(complexQuery, (err, results) => {\n          |          ^\n      254 |         if (err) {\n      255 |           done(err);\n      256 |           return;\n\n      at Object.all (tests/database.test.js:253:10)\n\n\n  ● Test suite failed to run\n\n    thrown: \"Exceeded timeout of 30000 ms for a hook while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      21 |   });\n      22 |\n    > 23 |   afterAll((done) => {\n         |   ^\n      24 |     if (db) {\n      25 |       db.close(done);\n      26 |     } else {\n\n      at afterAll (tests/database.test.js:23:3)\n      at Object.describe (tests/database.test.js:5:1)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        90.654 s, estimated 91 s\nRan all test suites matching /tests\\/database.test.js/i.\nFATAL ERROR: Error::ThrowAsJavaScriptException napi_throw\n----- Native stack trace -----\n\n 1: 0x104ceddb4 node::OnFatalError(char const*, char const*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n 2: 0x104cae1ec napi_open_callback_scope [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n 3: 0x109bfb650 Napi::Error::Error(napi_env__*, napi_value__*) [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 4: 0x109bf90e0 Napi::Error::ThrowAsJavaScriptException() const [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 5: 0x109bf7ad8 bool Napi::Object::Set<Napi::Number>(Napi::Value, Napi::Number const&) const [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 6: 0x109c0b2e4 node_sqlite3::Statement::CleanQueue() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 7: 0x109c16fe4 node_sqlite3::Statement::~Statement() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 8: 0x109c12fe0 node_sqlite3::Statement::~Statement() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 9: 0x109c153b4 Napi::ObjectWrap<node_sqlite3::Statement>::FinalizeCallback(napi_env__*, void*, void*) [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n10: 0x104cad12c void napi_env__::CallIntoModule<void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&, void node_napi_env__::CallbackIntoModule<true, void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)>(void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&&)::'lambda'(napi_env__*, v8::Local<v8::Value>)>(void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&, void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&&) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n11: 0x104cad0a8 void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n12: 0x104c91140 v8impl::Reference::Finalize() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n13: 0x104cacee4 napi_env__::DeleteMe() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n14: 0x104c31c24 node::CleanupQueue::Drain() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n15: 0x104c87014 node::Environment::RunCleanup() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n16: 0x104c068cc node::FreeEnvironment(node::Environment*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n17: 0x104d351a4 node::NodeMainInstance::Run() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n18: 0x104caca58 node::Start(int, char**) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n19: 0x18704ab98 start [/usr/lib/dyld]\n"
      ]
    },
    "integration": {
      "passed": 0,
      "failed": 0,
      "errors": [
        "Command failed: npm test -- tests/integration.test.js\nFAIL tests/integration.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 | const path = require('path');\n      4 |\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/integration.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.528 s\nRan all test suites matching /tests\\/integration.test.js/i.\n\nFAIL tests/integration.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 | const path = require('path');\n      4 |\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/integration.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.528 s\nRan all test suites matching /tests\\/integration.test.js/i.\n"
      ]
    },
    "fraudDetection": {
      "passed": 0,
      "failed": 0,
      "errors": [
        "Command failed: npm test -- tests/fraud-detection.test.js\nFAIL tests/fraud-detection.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 |\n      4 | describe('Fraud Detection Accuracy Tests', () => {\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/fraud-detection.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.65 s\nRan all test suites matching /tests\\/fraud-detection.test.js/i.\n\nFAIL tests/fraud-detection.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 |\n      4 | describe('Fraud Detection Accuracy Tests', () => {\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/fraud-detection.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.65 s\nRan all test suites matching /tests\\/fraud-detection.test.js/i.\n"
      ]
    }
  },
  "recommendations": [
    {
      "category": "api",
      "priority": "LOW",
      "issue": "1 test failures in api",
      "action": "Review and fix api test failures",
      "errors": [
        "Command failed: npm test -- tests/api.test.js\nFAIL tests/api.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 |\n      4 | describe('API Endpoint Tests', () => {\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/api.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.366 s\nRan all test suites matching /tests\\/api.test.js/i.\n\nFAIL tests/api.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 |\n      4 | describe('API Endpoint Tests', () => {\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/api.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.366 s\nRan all test suites matching /tests\\/api.test.js/i.\n"
      ]
    },
    {
      "category": "database",
      "priority": "LOW",
      "issue": "1 test failures in database",
      "action": "Review and fix database test failures",
      "errors": [
        "Command failed: npm test -- tests/database.test.js\nFAIL tests/database.test.js (90.369 s)\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have sample companies\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"email\"\n    Received path: []\n\n    Received value: {\"address\": \"123 Fleet Street\", \"city\": \"Chicago\", \"contact_email\": \"contact@metrologistics.com\", \"contact_phone\": \"(555) 123-4567\", \"country\": \"US\", \"created_at\": \"2025-08-22 03:45:11\", \"id\": 1, \"name\": \"Metro Logistics LLC\", \"registration_number\": \"ML001234567\", \"risk_score\": 2.5, \"state\": \"IL\", \"status\": \"active\", \"updated_at\": \"2025-08-22 03:45:11\", \"zip_code\": \"60601\"}\n\n      123 |           expect(company).toHaveProperty('id');\n      124 |           expect(company).toHaveProperty('name');\n    > 125 |           expect(company).toHaveProperty('email');\n          |                           ^\n      126 |         });\n      127 |\n      128 |         done();\n\n      at toHaveProperty (tests/database.test.js:125:27)\n          at Array.forEach (<anonymous>)\n      at Statement.forEach (tests/database.test.js:122:19)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have sample companies\n\n    thrown: \"Exceeded timeout of 30000 ms for a test while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      110 |     });\n      111 |\n    > 112 |     it('should have sample companies', (done) => {\n          |     ^\n      113 |       db.all(\"SELECT * FROM companies LIMIT 5\", (err, companies) => {\n      114 |         if (err) {\n      115 |           done(err);\n\n      at it (tests/database.test.js:112:5)\n      at describe (tests/database.test.js:99:3)\n      at Object.describe (tests/database.test.js:5:1)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have consistent driver-company relationships\n\n    SQLITE_ERROR: no such column: d.name\n    --> in Database#get('\\n' +\n      '        SELECT d.id, d.name as driver_name, c.name as company_name\\n' +\n      '        FROM drivers d\\n' +\n      '        LEFT JOIN companies c ON d.company_id = c.id\\n' +\n      '        WHERE c.id IS NULL\\n' +\n      '        LIMIT 1\\n' +\n      '      ', [Function (anonymous)])\n\n      139 |       `;\n      140 |\n    > 141 |       db.get(query, (err, orphanedDriver) => {\n          |          ^\n      142 |         if (err) {\n      143 |           done(err);\n      144 |           return;\n\n      at Object.get (tests/database.test.js:141:10)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have valid vehicle assignments\n\n    SQLITE_ERROR: no such column: v.vehicle_id\n    --> in Database#get('\\n' +\n      '        SELECT v.id, v.vehicle_id, c.name as company_name\\n' +\n      '        FROM vehicles v\\n' +\n      '        LEFT JOIN companies c ON v.company_id = c.id\\n' +\n      '        WHERE c.id IS NULL\\n' +\n      '        LIMIT 1\\n' +\n      '      ', [Function (anonymous)])\n\n      160 |       `;\n      161 |\n    > 162 |       db.get(query, (err, orphanedVehicle) => {\n          |          ^\n      163 |         if (err) {\n      164 |           done(err);\n      165 |           return;\n\n      at Object.get (tests/database.test.js:162:10)\n\n  ● Database Connection and Integrity Tests › Fraud Detection Data Validation › should have fraud alerts with proper structure\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"company_id\"\n    Received path: []\n\n    Received value: {\"alert_message\": \"Driver has multiple claims within 30 days\", \"alert_type\": \"claim_pattern\", \"assigned_to\": 3, \"created_at\": \"2025-08-22 03:45:11\", \"entity_id\": 3, \"entity_type\": \"driver\", \"fraud_indicators\": \"Multiple claims, high dollar amounts, pattern of incidents\", \"id\": 1, \"notes\": null, \"resolved_at\": null, \"risk_score\": 9.1, \"severity\": \"high\", \"status\": \"open\", \"updated_at\": \"2025-08-22 03:45:11\"}\n\n      183 |           alerts.forEach(alert => {\n      184 |             expect(alert).toHaveProperty('id');\n    > 185 |             expect(alert).toHaveProperty('company_id');\n          |                           ^\n      186 |             expect(alert).toHaveProperty('alert_type');\n      187 |             expect(alert).toHaveProperty('severity');\n      188 |             expect(alert).toHaveProperty('status');\n\n      at toHaveProperty (tests/database.test.js:185:27)\n          at Array.forEach (<anonymous>)\n      at Statement.forEach (tests/database.test.js:183:18)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n\n  ● Database Connection and Integrity Tests › Fraud Detection Data Validation › should have fraud alerts with proper structure\n\n    thrown: \"Exceeded timeout of 30000 ms for a test while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      173 |\n      174 |   describe('Fraud Detection Data Validation', () => {\n    > 175 |     it('should have fraud alerts with proper structure', (done) => {\n          |     ^\n      176 |       db.all(\"SELECT * FROM fraud_alerts LIMIT 5\", (err, alerts) => {\n      177 |         if (err) {\n      178 |           done(err);\n\n      at it (tests/database.test.js:175:5)\n      at describe (tests/database.test.js:174:3)\n      at Object.describe (tests/database.test.js:5:1)\n\n  ● Database Connection and Integrity Tests › Database Performance Tests › should handle large queries efficiently\n\n    SQLITE_ERROR: no such column: d.name\n    --> in Database#all('\\n' +\n      '        SELECT \\n' +\n      '          d.name,\\n' +\n      '          d.fraud_score,\\n' +\n      '          c.name as company_name,\\n' +\n      '          COUNT(v.id) as violation_count\\n' +\n      '        FROM drivers d\\n' +\n      '        LEFT JOIN companies c ON d.company_id = c.id\\n' +\n      '        LEFT JOIN violations v ON d.id = v.driver_id\\n' +\n      '        GROUP BY d.id, d.name, d.fraud_score, c.name\\n' +\n      '        ORDER BY d.fraud_score DESC\\n' +\n      '        LIMIT 100\\n' +\n      '      ', [Function (anonymous)])\n\n      251 |       `;\n      252 |\n    > 253 |       db.all(complexQuery, (err, results) => {\n          |          ^\n      254 |         if (err) {\n      255 |           done(err);\n      256 |           return;\n\n      at Object.all (tests/database.test.js:253:10)\n\n\n  ● Test suite failed to run\n\n    thrown: \"Exceeded timeout of 30000 ms for a hook while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      21 |   });\n      22 |\n    > 23 |   afterAll((done) => {\n         |   ^\n      24 |     if (db) {\n      25 |       db.close(done);\n      26 |     } else {\n\n      at afterAll (tests/database.test.js:23:3)\n      at Object.describe (tests/database.test.js:5:1)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        90.654 s, estimated 91 s\nRan all test suites matching /tests\\/database.test.js/i.\nFATAL ERROR: Error::ThrowAsJavaScriptException napi_throw\n----- Native stack trace -----\n\n 1: 0x104ceddb4 node::OnFatalError(char const*, char const*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n 2: 0x104cae1ec napi_open_callback_scope [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n 3: 0x109bfb650 Napi::Error::Error(napi_env__*, napi_value__*) [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 4: 0x109bf90e0 Napi::Error::ThrowAsJavaScriptException() const [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 5: 0x109bf7ad8 bool Napi::Object::Set<Napi::Number>(Napi::Value, Napi::Number const&) const [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 6: 0x109c0b2e4 node_sqlite3::Statement::CleanQueue() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 7: 0x109c16fe4 node_sqlite3::Statement::~Statement() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 8: 0x109c12fe0 node_sqlite3::Statement::~Statement() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 9: 0x109c153b4 Napi::ObjectWrap<node_sqlite3::Statement>::FinalizeCallback(napi_env__*, void*, void*) [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n10: 0x104cad12c void napi_env__::CallIntoModule<void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&, void node_napi_env__::CallbackIntoModule<true, void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)>(void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&&)::'lambda'(napi_env__*, v8::Local<v8::Value>)>(void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&, void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&&) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n11: 0x104cad0a8 void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n12: 0x104c91140 v8impl::Reference::Finalize() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n13: 0x104cacee4 napi_env__::DeleteMe() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n14: 0x104c31c24 node::CleanupQueue::Drain() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n15: 0x104c87014 node::Environment::RunCleanup() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n16: 0x104c068cc node::FreeEnvironment(node::Environment*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n17: 0x104d351a4 node::NodeMainInstance::Run() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n18: 0x104caca58 node::Start(int, char**) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n19: 0x18704ab98 start [/usr/lib/dyld]\n\nFAIL tests/database.test.js (90.369 s)\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have sample companies\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"email\"\n    Received path: []\n\n    Received value: {\"address\": \"123 Fleet Street\", \"city\": \"Chicago\", \"contact_email\": \"contact@metrologistics.com\", \"contact_phone\": \"(555) 123-4567\", \"country\": \"US\", \"created_at\": \"2025-08-22 03:45:11\", \"id\": 1, \"name\": \"Metro Logistics LLC\", \"registration_number\": \"ML001234567\", \"risk_score\": 2.5, \"state\": \"IL\", \"status\": \"active\", \"updated_at\": \"2025-08-22 03:45:11\", \"zip_code\": \"60601\"}\n\n      123 |           expect(company).toHaveProperty('id');\n      124 |           expect(company).toHaveProperty('name');\n    > 125 |           expect(company).toHaveProperty('email');\n          |                           ^\n      126 |         });\n      127 |\n      128 |         done();\n\n      at toHaveProperty (tests/database.test.js:125:27)\n          at Array.forEach (<anonymous>)\n      at Statement.forEach (tests/database.test.js:122:19)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have sample companies\n\n    thrown: \"Exceeded timeout of 30000 ms for a test while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      110 |     });\n      111 |\n    > 112 |     it('should have sample companies', (done) => {\n          |     ^\n      113 |       db.all(\"SELECT * FROM companies LIMIT 5\", (err, companies) => {\n      114 |         if (err) {\n      115 |           done(err);\n\n      at it (tests/database.test.js:112:5)\n      at describe (tests/database.test.js:99:3)\n      at Object.describe (tests/database.test.js:5:1)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have consistent driver-company relationships\n\n    SQLITE_ERROR: no such column: d.name\n    --> in Database#get('\\n' +\n      '        SELECT d.id, d.name as driver_name, c.name as company_name\\n' +\n      '        FROM drivers d\\n' +\n      '        LEFT JOIN companies c ON d.company_id = c.id\\n' +\n      '        WHERE c.id IS NULL\\n' +\n      '        LIMIT 1\\n' +\n      '      ', [Function (anonymous)])\n\n      139 |       `;\n      140 |\n    > 141 |       db.get(query, (err, orphanedDriver) => {\n          |          ^\n      142 |         if (err) {\n      143 |           done(err);\n      144 |           return;\n\n      at Object.get (tests/database.test.js:141:10)\n\n  ● Database Connection and Integrity Tests › Data Integrity Tests › should have valid vehicle assignments\n\n    SQLITE_ERROR: no such column: v.vehicle_id\n    --> in Database#get('\\n' +\n      '        SELECT v.id, v.vehicle_id, c.name as company_name\\n' +\n      '        FROM vehicles v\\n' +\n      '        LEFT JOIN companies c ON v.company_id = c.id\\n' +\n      '        WHERE c.id IS NULL\\n' +\n      '        LIMIT 1\\n' +\n      '      ', [Function (anonymous)])\n\n      160 |       `;\n      161 |\n    > 162 |       db.get(query, (err, orphanedVehicle) => {\n          |          ^\n      163 |         if (err) {\n      164 |           done(err);\n      165 |           return;\n\n      at Object.get (tests/database.test.js:162:10)\n\n  ● Database Connection and Integrity Tests › Fraud Detection Data Validation › should have fraud alerts with proper structure\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"company_id\"\n    Received path: []\n\n    Received value: {\"alert_message\": \"Driver has multiple claims within 30 days\", \"alert_type\": \"claim_pattern\", \"assigned_to\": 3, \"created_at\": \"2025-08-22 03:45:11\", \"entity_id\": 3, \"entity_type\": \"driver\", \"fraud_indicators\": \"Multiple claims, high dollar amounts, pattern of incidents\", \"id\": 1, \"notes\": null, \"resolved_at\": null, \"risk_score\": 9.1, \"severity\": \"high\", \"status\": \"open\", \"updated_at\": \"2025-08-22 03:45:11\"}\n\n      183 |           alerts.forEach(alert => {\n      184 |             expect(alert).toHaveProperty('id');\n    > 185 |             expect(alert).toHaveProperty('company_id');\n          |                           ^\n      186 |             expect(alert).toHaveProperty('alert_type');\n      187 |             expect(alert).toHaveProperty('severity');\n      188 |             expect(alert).toHaveProperty('status');\n\n      at toHaveProperty (tests/database.test.js:185:27)\n          at Array.forEach (<anonymous>)\n      at Statement.forEach (tests/database.test.js:183:18)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n      at Statement.replacement (node_modules/sqlite3/lib/trace.js:25:27)\n\n  ● Database Connection and Integrity Tests › Fraud Detection Data Validation › should have fraud alerts with proper structure\n\n    thrown: \"Exceeded timeout of 30000 ms for a test while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      173 |\n      174 |   describe('Fraud Detection Data Validation', () => {\n    > 175 |     it('should have fraud alerts with proper structure', (done) => {\n          |     ^\n      176 |       db.all(\"SELECT * FROM fraud_alerts LIMIT 5\", (err, alerts) => {\n      177 |         if (err) {\n      178 |           done(err);\n\n      at it (tests/database.test.js:175:5)\n      at describe (tests/database.test.js:174:3)\n      at Object.describe (tests/database.test.js:5:1)\n\n  ● Database Connection and Integrity Tests › Database Performance Tests › should handle large queries efficiently\n\n    SQLITE_ERROR: no such column: d.name\n    --> in Database#all('\\n' +\n      '        SELECT \\n' +\n      '          d.name,\\n' +\n      '          d.fraud_score,\\n' +\n      '          c.name as company_name,\\n' +\n      '          COUNT(v.id) as violation_count\\n' +\n      '        FROM drivers d\\n' +\n      '        LEFT JOIN companies c ON d.company_id = c.id\\n' +\n      '        LEFT JOIN violations v ON d.id = v.driver_id\\n' +\n      '        GROUP BY d.id, d.name, d.fraud_score, c.name\\n' +\n      '        ORDER BY d.fraud_score DESC\\n' +\n      '        LIMIT 100\\n' +\n      '      ', [Function (anonymous)])\n\n      251 |       `;\n      252 |\n    > 253 |       db.all(complexQuery, (err, results) => {\n          |          ^\n      254 |         if (err) {\n      255 |           done(err);\n      256 |           return;\n\n      at Object.all (tests/database.test.js:253:10)\n\n\n  ● Test suite failed to run\n\n    thrown: \"Exceeded timeout of 30000 ms for a hook while waiting for `done()` to be called.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      21 |   });\n      22 |\n    > 23 |   afterAll((done) => {\n         |   ^\n      24 |     if (db) {\n      25 |       db.close(done);\n      26 |     } else {\n\n      at afterAll (tests/database.test.js:23:3)\n      at Object.describe (tests/database.test.js:5:1)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        90.654 s, estimated 91 s\nRan all test suites matching /tests\\/database.test.js/i.\nFATAL ERROR: Error::ThrowAsJavaScriptException napi_throw\n----- Native stack trace -----\n\n 1: 0x104ceddb4 node::OnFatalError(char const*, char const*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n 2: 0x104cae1ec napi_open_callback_scope [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n 3: 0x109bfb650 Napi::Error::Error(napi_env__*, napi_value__*) [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 4: 0x109bf90e0 Napi::Error::ThrowAsJavaScriptException() const [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 5: 0x109bf7ad8 bool Napi::Object::Set<Napi::Number>(Napi::Value, Napi::Number const&) const [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 6: 0x109c0b2e4 node_sqlite3::Statement::CleanQueue() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 7: 0x109c16fe4 node_sqlite3::Statement::~Statement() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 8: 0x109c12fe0 node_sqlite3::Statement::~Statement() [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n 9: 0x109c153b4 Napi::ObjectWrap<node_sqlite3::Statement>::FinalizeCallback(napi_env__*, void*, void*) [/Users/nathan/Desktop/fleet-fraud-dashboard/node_modules/sqlite3/build/Release/node_sqlite3.node]\n10: 0x104cad12c void napi_env__::CallIntoModule<void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&, void node_napi_env__::CallbackIntoModule<true, void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)>(void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&&)::'lambda'(napi_env__*, v8::Local<v8::Value>)>(void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&, void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::'lambda'(napi_env__*)&&) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n11: 0x104cad0a8 void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n12: 0x104c91140 v8impl::Reference::Finalize() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n13: 0x104cacee4 napi_env__::DeleteMe() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n14: 0x104c31c24 node::CleanupQueue::Drain() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n15: 0x104c87014 node::Environment::RunCleanup() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n16: 0x104c068cc node::FreeEnvironment(node::Environment*) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n17: 0x104d351a4 node::NodeMainInstance::Run() [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n18: 0x104caca58 node::Start(int, char**) [/opt/homebrew/Cellar/node/23.11.0/bin/node]\n19: 0x18704ab98 start [/usr/lib/dyld]\n"
      ]
    },
    {
      "category": "integration",
      "priority": "LOW",
      "issue": "1 test failures in integration",
      "action": "Review and fix integration test failures",
      "errors": [
        "Command failed: npm test -- tests/integration.test.js\nFAIL tests/integration.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 | const path = require('path');\n      4 |\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/integration.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.528 s\nRan all test suites matching /tests\\/integration.test.js/i.\n\nFAIL tests/integration.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 | const path = require('path');\n      4 |\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/integration.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.528 s\nRan all test suites matching /tests\\/integration.test.js/i.\n"
      ]
    },
    {
      "category": "fraudDetection",
      "priority": "LOW",
      "issue": "1 test failures in fraudDetection",
      "action": "Review and fix fraudDetection test failures",
      "errors": [
        "Command failed: npm test -- tests/fraud-detection.test.js\nFAIL tests/fraud-detection.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 |\n      4 | describe('Fraud Detection Accuracy Tests', () => {\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/fraud-detection.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.65 s\nRan all test suites matching /tests\\/fraud-detection.test.js/i.\n\nFAIL tests/fraud-detection.test.js\n  ● Test suite failed to run\n\n    ReferenceError: TextEncoder is not defined\n\n    > 1 | const request = require('supertest');\n        |                 ^\n      2 | const app = require('../server');\n      3 |\n      4 | describe('Fraud Detection Accuracy Tests', () => {\n\n      at utf8ToBytes (node_modules/@noble/hashes/src/utils.ts:217:29)\n      at toBytes (node_modules/@noble/hashes/src/utils.ts:236:40)\n      at hashC (node_modules/@noble/hashes/src/utils.ts:342:63)\n      at hash (node_modules/@paralleldrive/cuid2/src/index.js:34:22)\n      at createFingerprint (node_modules/@paralleldrive/cuid2/src/index.js:63:10)\n      at init (node_modules/@paralleldrive/cuid2/src/index.js:81:17)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/src/index.js:101:18)\n      at Object.<anonymous> (node_modules/@paralleldrive/cuid2/index.js:1:152)\n      at Object.<anonymous> (node_modules/formidable/src/Formidable.js:8:15)\n      at Object.<anonymous> (node_modules/formidable/src/index.js:5:20)\n      at Object.require (node_modules/superagent/src/node/index.js:17:20)\n      at Object.<anonymous> (node_modules/supertest/lib/test.js:11:21)\n      at Object.<anonymous> (node_modules/supertest/index.js:14:14)\n      at Object.require (tests/fraud-detection.test.js:1:17)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.65 s\nRan all test suites matching /tests\\/fraud-detection.test.js/i.\n"
      ]
    }
  ]
}